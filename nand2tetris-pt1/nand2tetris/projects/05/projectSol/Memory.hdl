// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    Or(a=address[13], b=address[12], out=or1213);
    Not(in=address[13], out=not13);
    And(a=address[14], b=or1213, out=sel0);
    And(a=address[14], b=not13, out=sel1);
    
    DMux4Way(in=load, sel[0]=sel0,sel[1]=sel1, a=load16k, b=kbd, c=up4k, d=down4k);
    // Mux4Way16(a=out16k, b=outup4k, c=outdown4k, d=outkbd,sel[0]=sel0,sel[1]=sel1 , out=out);
    Mux4Way16(a=out16k, b=outkbd, c=outScreen, d=outScreen,sel[0]=sel0,sel[1]=sel1 , out=out);

    RAM16K(in=in, load=load16k, address=address[0..13], out=out16k);
    // RAM4K(in=in, load=up4k, address=address[0..11], out=outup4k);
    // RAM4K(in=in, load=down4k, address=address[0..11], out=outdown4k);
    // Register(in=in, load=kbd, out=outkbd);
    
    Or(a=up4k, b=down4k, out=screenLoad);
    Screen(in=in, load=screenLoad, address=address[0..12], out=outScreen);
    Keyboard(out=outkbd);
    
}